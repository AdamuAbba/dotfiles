{
  "TypeScript Function Documentation": {
    "prefix": "docf",
    "body": [
      "/**",
      " * Function: ${1:function_name}",
      " * -------------------------",
      " * Description:",
      " *   ${2:Description of the function}",
      " * Parameters:",
      " *   @param ${3:parameter_1} ${4:Description of parameter 1}",
      " * Returns:",
      " *   ${5:Description of what the function returns}",
      " * Usage:",
      " *   ${6:enter usage here}",
      " */",
      "function ${1:function_name}() {",
      "    ${7:// Function logic goes here}",
      "}",
      ""
    ],
    "description": "Generate documentation for a TypeScript function"
  },
  "Add separator": {
    "prefix": "divider",
    "body": "//============================================= $0 ============================================="
  },
  "Comment Divider": {
    "prefix": "comment",
    "body": [
      "// ------------------------------",
      "// ${1:Comment goes here}",
      "// ------------------------------"
    ],
    "description": "Insert a comment divider"
  },
  "reactNativeStylesExport": {
    "prefix": [
      "rnssnips"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "import {StyleSheet} from 'react-native'",
      "",
      "const styles = StyleSheet.create({",
      "container: {",
      "\tflex:1",
      "\t}",
      "\t});",
      "",
      "export {styles};"
    ],
    "description": "react native styles export snippet"
  },
  "barrelExportComponent": {
    "prefix": [
      "baexp",
      "baexport"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "export {default} from './${0}'"
    ],
    "description": "react native styles export snippet"
  },
  "reactFunctionalComponentType": {
    "prefix": [
      "rfcts"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "interface Props {",
      "",
      "}",
      "",
      "type I${0:ComponentName} = React.FC<Props>",
      "export type {I${0:ComponentName}}"
    ],
    "description": "react functional component snippet"
  },
  "reactNativeNavigatorType": {
    "prefix": [
      "fctn"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "type ${0:ComponentName}ParamList = {",
      "",
      "}",
      "",
      "type ${0:ComponentName}ScreenProps = ",
      "",
      "type I${0:ComponentName} = React.FC",
      "export type {I${0:ComponentName},${0:ComponentName}ParamList,${0:ComponentName}ScreenProps}"
    ],
    "description": "react native navigator component"
  },
  "customReactNativeFunctionalComponent": {
    "prefix": [
      "crnfc"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "import { Box, Text } from '@gluestack-ui/themed';",
      "import React from 'react';",
      "import type {I${0:$TM_FILENAME_BASE}} from './types';",
      "",
      "export const ${0:$TM_FILENAME_BASE} = () => {",
      "return (",
      "<Box>",
      "<Text>${0:$TM_FILENAME_BASE}</Text>",
      "</Box>",
      ");",
      "};",
      "",
      "export default ${0:$TM_FILENAME_BASE}"
    ],
    "description": "react native functional component snippet"
  },
  "createStackNavigator": {
    "prefix": [
      "csnc"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "import {createStackNavigator} from '@react-navigation/stack';",
      "import React from 'react';",
      "import type {I${0:TM_FILENAME_BASE}, ${0:TM_FILENAME_BASE}ParamList} from './types';",
      "",
      "const Stack = createStackNavigator<${0:TM_FILENAME_BASE}ParamList>();",
      "const {Navigator, Screen} = Stack;",
      "",
      "export const ${0:TM_FILENAME_BASE}: I${0:TM_FILENAME_BASE} = () => {",
      " return (",
      "\t<Navigator>",
      "\t\t<Screen name='' component={} />",
      "\t\t<Screen name='' component={} />",
      "\t</Navigator>",
      "\t\t);",
      "};"
    ],
    "description": "react native stack navigator component snippet"
  },
  "useStateSnippetString": {
    "prefix": [
      "usss"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<string>('')",
      ""
    ],
    "description": "react useState snippet string"
  },
  "useStateSnippetNumber": {
    "prefix": [
      "ussn"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<number>(0)",
      ""
    ],
    "description": "react useState snippet number"
  },
  "useStateSnippetBoolean": {
    "prefix": [
      "ussb"
    ],
    "scope": "typescript,typescriptreact",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<boolean>(false)",
      ""
    ],
    "description": "react useState snippet boolean"
  },
  "typeExport": {
    "prefix": [
      "expt",
      "et"
    ],
    "scope": "typescript",
    "body": [
      "export type {${0}}"
    ],
    "description": "typescript type export"
  },
  "allExport": {
    "prefix": [
      "expa"
    ],
    "scope": "typescript",
    "body": [
      "export * from '${0}';"
    ],
    "description": "export all snippet"
  },
  "RN navigation screen component": {
    "prefix": [
      "rnvs"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "<Screen name=\"$1\" component={ $2 } />"
    ],
    "description": "react navigation screen component "
  },
  "reactNativeTestSnippet": {
    "prefix": [
      "rnt",
      "rntsnips"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "import ${3:$TM_FILENAME_BASE} from './${3:$TM_FILENAME_BASE}';",
      "",
      "describe('Testing ${3:$TM_FILENAME_BASE}', () => {",
      "it('renders the component correctly', () => {",
      "renderWithWrappers(<${3:$TM_FILENAME_BASE/>)",
      "});",
      "});"
    ],
    "description": "react native test snippet"
  },
  "reduxToolkitCreateSlice": {
    "prefix": [
      "rtkcs"
    ],
    "scope": "typescript",
    "body": [
      "import {createSlice, PayloadAction} from '@reduxjs/toolkit';",
      "import type {${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}InitialState} from './types';",
      "",
      "const initialState: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}InitialState = {",
      "",
      "};",
      "",
      "export const $TM_FILENAME_BASE = createSlice({",
      "name: '$TM_FILENAME_BASE',",
      "initialState,",
      "reducers: {",
      "",
      "},",
      "});",
      "",
      "export const {} = $TM_FILENAME_BASE.actions;",
      "",
      "export default $TM_FILENAME_BASE;"
    ],
    "description": "redux toolkit create slice snippet"
  },
  "reduxToolkitQuery": {
    "prefix": [
      "rtkq"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';",
      "",
      "const BASE_URL: string = \"$0\";",
      "",
      "const $TM_FILENAME_BASE = createApi({",
      "reducerPath: '$TM_FILENAME_BASE',",
      "baseQuery: fetchBaseQuery({ baseUrl: BASE_URL }),",
      "endpoints: () => ({}),",
      "});",
      "",
      "export default $TM_FILENAME_BASE;"
    ],
    "description": "redux toolkit query snippet"
  },
  "reactNativeCustomBottomTab": {
    "prefix": [
      "rncbt",
      "rncbtb"
    ],
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "body": [
      "import { View, Text, TouchableOpacity } from 'react-native';",
      "import {styles} from './${3:$TM_FILENAME_BASE}.styles'",
      "",
      "const ${3:$TM_FILENAME_BASE} = ({ state, descriptors, navigation })=> {",
      "return (",
      "<View style={{ flexDirection: 'row' }}>",
      " {state.routes.map((route, index) => {",
      "const { options } = descriptors[route.key];",
      "const label =",
      "options.tabBarLabel !== undefined",
      "? options.tabBarLabel",
      ": options.title !== undefined",
      "? options.title",
      ": route.name;",
      "",
      "const isFocused = state.index === index;",
      "",
      "const onPress = () => {",
      "const event = navigation.emit({",
      "type: 'tabPress',",
      "target: route.key,",
      "canPreventDefault: true",
      "});",
      "",
      "if (!isFocused && !event.defaultPrevented) {",
      "// The `merge: true` option makes sure that the params inside the tab screen are preserved",
      "navigation.navigate({ name: route.name, merge: true });",
      "}",
      "};",
      "",
      "const onLongPress = () => {",
      "navigation.emit({",
      "type: 'tabLongPress',",
      "target: route.key,",
      "});",
      "};",
      "",
      "return (",
      "<TouchableOpacity",
      "accessibilityRole='button'",
      "accessibilityState={isFocused ? { selected: true } : {}}",
      "accessibilityLabel={options.tabBarAccessibilityLabel}",
      "testID={options.tabBarTestID}",
      "onPress={onPress}",
      "onLongPress={onLongPress}",
      "style={{ flex: 1 }}",
      ">",
      "<Text style={{ color: isFocused ? '#673ab7' : '#222' }}>",
      "{label}",
      " </Text>",
      "</TouchableOpacity>",
      ");",
      "})}",
      " </View>",
      ");",
      "}",
      "",
      "export default ${3:$TM_FILENAME_BASE}"
    ],
    "description": "react native custom bottom tab bar snippet"
  }
}

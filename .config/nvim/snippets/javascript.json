{"reactFunctionalComponentType":{"body":["interface Props {","","}","","type I${0:ComponentName} = React.FC<Props>","export type {I${0:ComponentName}}"],"scope":"typescript,typescriptreact","description":"react functional component snippet","prefix":["rfcts"]},"reactNativeTestSnippet":{"body":["import ${3:$TM_FILENAME_BASE} from './${3:$TM_FILENAME_BASE}';","","describe('Testing ${3:$TM_FILENAME_BASE}', () => {","it('renders the component correctly', () => {","renderWithWrappers(<${3:$TM_FILENAME_BASE/>)","});","});"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"react native test snippet","prefix":["rnt","rntsnips"]},"reactNativeNavigatorType":{"body":["type ${0:ComponentName}ParamList = {","","}","","type ${0:ComponentName}ScreenProps = ","","type I${0:ComponentName} = React.FC","export type {I${0:ComponentName},${0:ComponentName}ParamList,${0:ComponentName}ScreenProps}"],"scope":"typescript,typescriptreact","description":"react native navigator component","prefix":["fctn"]},"useStateSnippetString":{"body":["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<string>('')",""],"scope":"typescript,typescriptreact","description":"react useState snippet string","prefix":["usss"]},"reduxToolkitCreateSlice":{"body":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';","import type {${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}InitialState} from './types';","","const initialState: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}InitialState = {","","};","","export const $TM_FILENAME_BASE = createSlice({","name: '$TM_FILENAME_BASE',","initialState,","reducers: {","","},","});","","export const {} = $TM_FILENAME_BASE.actions;","","export default $TM_FILENAME_BASE;"],"scope":"typescript","description":"redux toolkit create slice snippet","prefix":["rtkcs"]},"Add separator":{"body":"//============================================= $0 =============================================","prefix":"divider"},"useStateSnippetNumber":{"body":["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<number>(0)",""],"scope":"typescript,typescriptreact","description":"react useState snippet number","prefix":["ussn"]},"Comment Divider":{"body":["// ------------------------------","// ${1:Comment goes here}","// ------------------------------"],"description":"Insert a comment divider","prefix":"comment"},"useStateSnippetBoolean":{"body":["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<boolean>(false)",""],"scope":"typescript,typescriptreact","description":"react useState snippet boolean","prefix":["ussb"]},"reactNativeStylesExport":{"body":["import {StyleSheet} from 'react-native'","","const styles = StyleSheet.create({","container: {","\tflex:1","\t}","\t});","","export {styles};"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"react native styles export snippet","prefix":["rnssnips"]},"typeExport":{"body":["export type {${0}}"],"scope":"typescript","description":"typescript type export","prefix":["expt","et"]},"reduxToolkitQuery":{"body":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';","","const BASE_URL: string = \"$0\";","","const $TM_FILENAME_BASE = createApi({","reducerPath: '$TM_FILENAME_BASE',","baseQuery: fetchBaseQuery({ baseUrl: BASE_URL }),","endpoints: () => ({}),","});","","export default $TM_FILENAME_BASE;"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"redux toolkit query snippet","prefix":["rtkq"]},"exd":{"body":"export { default } from \"./$0\";","prefix":"exd"},"reactNativeCustomBottomTab":{"body":["import { View, Text, TouchableOpacity } from 'react-native';","import {styles} from './${3:$TM_FILENAME_BASE}.styles'","","const ${3:$TM_FILENAME_BASE} = ({ state, descriptors, navigation })=> {","return (","<View style={{ flexDirection: 'row' }}>"," {state.routes.map((route, index) => {","const { options } = descriptors[route.key];","const label =","options.tabBarLabel !== undefined","? options.tabBarLabel",": options.title !== undefined","? options.title",": route.name;","","const isFocused = state.index === index;","","const onPress = () => {","const event = navigation.emit({","type: 'tabPress',","target: route.key,","canPreventDefault: true","});","","if (!isFocused && !event.defaultPrevented) {","// The `merge: true` option makes sure that the params inside the tab screen are preserved","navigation.navigate({ name: route.name, merge: true });","}","};","","const onLongPress = () => {","navigation.emit({","type: 'tabLongPress',","target: route.key,","});","};","","return (","<TouchableOpacity","accessibilityRole='button'","accessibilityState={isFocused ? { selected: true } : {}}","accessibilityLabel={options.tabBarAccessibilityLabel}","testID={options.tabBarTestID}","onPress={onPress}","onLongPress={onLongPress}","style={{ flex: 1 }}",">","<Text style={{ color: isFocused ? '#673ab7' : '#222' }}>","{label}"," </Text>","</TouchableOpacity>",");","})}"," </View>",");","}","","export default ${3:$TM_FILENAME_BASE}"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"react native custom bottom tab bar snippet","prefix":["rncbt","rncbtb"]},"allExport":{"body":["export * from '${0}';"],"scope":"typescript","description":"export all snippet","prefix":["expa"]},"barrelExportComponent":{"body":["export {default} from './${0}'"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"react native styles export snippet","prefix":["baexp","baexport"]},"createStackNavigator":{"body":["import {createStackNavigator} from '@react-navigation/stack';","import React from 'react';","import type {I${0:TM_FILENAME_BASE}, ${0:TM_FILENAME_BASE}ParamList} from './types';","","const Stack = createStackNavigator<${0:TM_FILENAME_BASE}ParamList>();","const {Navigator, Screen} = Stack;","","export const ${0:TM_FILENAME_BASE}: I${0:TM_FILENAME_BASE} = () => {"," return (","\t<Navigator>","\t\t<Screen name='' component={} />","\t\t<Screen name='' component={} />","\t</Navigator>","\t\t);","};"],"scope":"typescript,typescriptreact","description":"react native stack navigator component snippet","prefix":["csnc"]},"customReactNativeFunctionalComponent":{"body":["import { Box, Text } from '@gluestack-ui/themed';","import React from 'react';","import type {I${0:$TM_FILENAME_BASE}} from './types';","","export const ${0:$TM_FILENAME_BASE} = () => {","return (","<Box>","<Text>${0:$TM_FILENAME_BASE}</Text>","</Box>",");","};","","export default ${0:$TM_FILENAME_BASE}"],"scope":"typescript,typescriptreact","description":"react native functional component snippet","prefix":["crnfc"]},"RN navigation screen component":{"body":["<Screen name=\"$1\" component={ $2 } />"],"scope":"javascript,typescript,javascriptreact,typescriptreact","description":"react navigation screen component ","prefix":["rnvs"]},"TypeScript Function Documentation":{"body":["/**"," * Function: ${1:function_name}"," * -------------------------"," * Description:"," *   ${2:Description of the function}"," * Parameters:"," *   @param ${3:parameter_1} ${4:Description of parameter 1}"," * Returns:"," *   ${5:Description of what the function returns}"," * Usage:"," *   ${6:enter usage here}"," */","function ${1:function_name}() {","    ${7:// Function logic goes here}","}",""],"description":"Generate documentation for a TypeScript function","prefix":"docf"}}

# ================================================================== Language Servers ============================================

#========================= vscode-eslint-language-server ===========================
[language-server.vscode-eslint-language-server]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.vscode-eslint-language-server.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = ""

[language-server.vscode-eslint-language-server.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.vscode-eslint-language-server.config.codeAction.showDocumentation]
enable = true

[language-server.vscode-eslint-language-server.config.workingDirectory]
mode = "location"

#========================= vtsls ======================================
[language-server.typescript-language-server]
command = "vtsls"
args = ["--stdio"]
config.hostInfo = "helix"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.typescript]
updateImportsOnFileMove = { enabled = "always" }
suggest = { completeFunctionCalls = true }

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.javascript]
updateImportsOnFileMove = { enabled = "always" }
suggest = { completeFunctionCalls = true }

#========================= ansible-language-server =======================
[language-server.ansible-language-server]
command = "ansible-language-server"
args = ["--stdio"]
#========================= yaml-language-server ==========================
[language-server.yaml-language-server]
command = "yaml-language-server"
args = ["--stdio"]

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"
#========================= lua-language-server ===========================
[language-server.lua-language-server]
command = "lua-language-server"

[language-server.lua-language-server.config.Lua.hint]
enable = true
arrayIndex = "Enable"
setType = true
paramName = "All"
paramType = true
await = true
#========================= superhtml =====================================
[language-server.superhtml]
command = "superhtml"
args = ["lsp"]
#========================= vscode-html-language-server ===================
[language-server.vscode-html-language-server]
command = "vscode-html-language-server"
args = ["--stdio"]
config = { provideFormatter = true }
#========================= vscode-css-language-server ====================
[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]
config = { provideFormatter = true, css = { validate = { enable = true } } }
#========================= vscode-json-language-server ===================
[language-server.vscode-json-language-server]
command = "vscode-json-language-server"
args = ["--stdio"]
config = { provideFormatter = true, json = { validate = { enable = true } } }
#========================= rust-analyzer =================================
[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.rust-analyzer.config.check]
command = "clippy"
[language-server.rust-analyzer.config.cargo]
features = "all"
#========================= bash-language-server ================
[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]
#========================= rubocop =============================
[language-server.rubocop]
command = "bundle"
args = ["exec", "rubocop", "--lsp"]
#========================= SQL ================================
[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]
#========================= python ==============================
[language-server.pylsp]
command = "pylsp"

[language-server.pylsp.config.pylsp]
plugins.pylsp_mypy.enabled = true
plugins.pylsp_mypy.live_mode = true
#========================= stylelint =========================
[language-server.stylelint]
command = "stylelint-lsp"
args = ["--stdio"]

[language-server.stylelint.config]
stylelintplus = { autoFixOnFormat = true, autoFixOnSave = true }
#========================= tailwindcss-ls ====================
[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

#==================================================================== Languages ======================================================================
[[language]]
name = "rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = ["rust-analyzer"]
indent = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["rustc", "clippy"]

[[language]]
name = "html"
injection-regex = "html"
file-types = [
  "html",
  "htm",
  "shtml",
  "xhtml",
  "xht",
  "jsp",
  "asp",
  "aspx",
  "jshtm",
  "volt",
  "rhtml",
  "cshtml",
]
block-comment-tokens = { start = "<!--", end = "-->" }
language-servers = ["vscode-html-language-server", "superhtml"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "webc"
auto-format = true
language-servers = ["vscode-html-language-server"]
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "ruby"
auto-format = true
language-servers = ["solargraph", "rubocop"]

[[language]]
name = "typescript"
injection-regex = "(ts|typescript)"
language-id = "typescript"
file-types = ["ts", "mts", "cts"]
shebangs = ["deno", "bun", "ts-node"]
roots = ["package.json", "tsconfig.json"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
auto-format = true
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "javascript"
injection-regex = "(js|javascript)"
language-id = "javascript"
file-types = [
  "js",
  "mjs",
  "cjs",
  "rules",
  "es6",
  "pac",
  { glob = ".node_repl_history" },
  { glob = "jakefile" },
]
shebangs = ["node"]
roots = ["package.json"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
auto-format = true
injection-regex = "(tsx)"
language-id = "typescriptreact"
file-types = ["tsx"]
roots = ["package.json", "tsconfig.json"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [
  "typscript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "jsx"
auto-format = true
injection-regex = "jsx"
language-id = "javascriptreact"
file-types = ["jsx"]
roots = ["package.json"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "json"
injection-regex = "json"
file-types = [
  "json",
  "arb",
  "ipynb",
  "geojson",
  "gltf",
  "webmanifest",
  { glob = "flake.lock" },
  { glob = ".babelrc" },
  { glob = ".bowerrc" },
  { glob = ".jscrc" },
  "js.map",
  "ts.map",
  "css.map",
  { glob = ".jslintrc" },
  "jsonl",
  "jsonld",
  { glob = ".vuerc" },
  { glob = "composer.lock" },
  { glob = ".watchmanconfig" },
  "avsc",
  "ldtk",
  "ldtkl",
  { glob = ".swift-format" },
  "sublime-build",
  "sublime-color-scheme",
  "sublime-commands",
  "sublime-completions",
  "sublime-keymap",
  "sublime-macro",
  "sublime-menu",
  "sublime-mousemap",
  "sublime-project",
  "sublime-settings",
  "sublime-theme",
  "sublime-workspace",
]
formatter = { command = 'prettier', args = ["--parser", "json"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "css"
injection-regex = "css"
file-types = ["css", "scss"]
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = ["stylelint", "vscode-css-language-server"]
auto-format = true
formatter = { command = 'prettier', args = ["--parser", "css"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "scss"
file-types = ["scss"]
language-servers = [
  "stylelint",
  { name = "vscode-css-language-server", only-features = [
    "completion",
  ] },
]
auto-format = true
formatter = { command = 'bash', args = [
  "-c",
  "npx stylelint --fix 2>&1 | prettier --parser css ",
] }

[[language]]
name = "toml"
injection-regex = "toml"
file-types = [
  "toml",
  { glob = "pdm.lock" },
  { glob = "poetry.lock" },
  { glob = "Cargo.lock" },
  { glob = "uv.lock" },
]
comment-token = "#"
language-servers = ["taplo"]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "taplo", args = ["fmt", "-"] }
auto-format = true

[[language]]
name = "python"
injection-regex = "py(thon)?"
file-types = [
  "py",
  "pyi",
  "py3",
  "pyw",
  "ptl",
  "rpy",
  "cpy",
  "ipy",
  "pyt",
  { glob = ".python_history" },
  { glob = ".pythonstartup" },
  { glob = ".pythonrc" },
  { glob = "*SConstruct" },
  { glob = "*SConscript" },
  { glob = "*sconstruct" },
]
shebangs = ["python", "uv"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
comment-token = "#"
language-servers = ["pylsp"]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "yaml"
file-types = [
  "yml",
  "yaml",
  { glob = ".prettierrc" },
  { glob = ".clangd" },
  { glob = ".clang-format" },
  { glob = ".clang-tidy" },
  "sublime-syntax",
]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["yaml-language-server", "ansible-language-server"]
injection-regex = "yml|yaml"
